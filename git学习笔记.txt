git 学习总结：

【1】本地仓库
	一、本地创建Git版本库
		1、git init    #初始化本地Git仓库
		2、添加文件到Git仓库，分两步：
			2.1 git add <file> #可反复多次使用，添加多个文件到[暂存区]；
			2.2 git commit -m "有意义的说明"     [将暂存区的所有文件提交到当前分支]；
		
	二、版本回退
		1、git status  #查看当前工作区的状态，有没有被修改过的文件
		2、git diff    #若有被修改过的文件，可以查看修改的内容(不适合图像、音视频、excel等二进制文件查看，只能看到被修改过，无法看到被修改的内容)
		3、git log #查看历史更改记录(显示的顺序从近到远)   参数 --pretty=oneline 可以简化输出内容：为方便下面的演示，将版本历史变化附到下方：
		$ git log --pretty=oneline
		7514ae10b7aaa7ef7bdbcaa930cdad328e7c7b9a append GPL
		4df0355996fc9978efb87281acde7eb8f4ed60d6 add somenumber in cs.xlsz
		7283fb95d7878c82c27b7b6759adc1cd6a3ef3d4 add a microsoft excel file
		483cecdfc8671e685e848cb2274ab83249170607 add a  Microsoft word file
		bd8f52d84f9282961ab0c0e8c76a1b835d613ba6 add distributed
		885f9c42ca020a5d0c6957b053ef33ceab6fc34f wrote a readme file
		4、回退历史操作：
			4.1 用HEAD表示当前版本，上一个版本为HEAD^，上上一个版本就是HEAD^^，如果时间过长，可以使用HEAD~n(你表示第几个版本)，往上20个版本就是HEAD~20；
			4.2 git reset --hard HEAD^  #回退到上一个版本，--hard参数暂不做解释
		5、前往未来版本操作：
			方法一：如果之前的窗口没关，往上翻，找到最近的版本7514ae10b7......,然后使用git reset --hard 514ae10b7；
			方法er: 如果之前的窗口已关，则使用git reflog  #记录每次的操作，第一列就是每次更新的版本号即commit id
			$ git reflog
			7514ae1 HEAD@{0}: reset: moving to 7514ae10b7
			4df0355 HEAD@{1}: reset: moving to HEAD^
			7514ae1 HEAD@{2}: commit: append GPL
			4df0355 HEAD@{3}: commit: add somenumber in cs.xlsz
			7283fb9 HEAD@{4}: commit: add a microsoft excel file
			483cecd HEAD@{5}: commit: add a Microsoft word file
			bd8f52d HEAD@{6}: commit: add distributed
			885f9c4 HEAD@{7}: commit (initial): wrote a readme file
		6、理解暂存区与工作区(http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013745374151782eb658c5a5ca454eaa451661275886c6000)
		#git 分为两大区域：工作区(初始化的目录)和版本库(.git 目录)，版本库里最重要的分类是暂存区、分支。
	三、撤销修改
		git checkout -- file 意思就是，把file文件在工作区的修改全部撤销，这里有两种情况：
		一种是文件自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
		一种是文件已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
		总之，就是让这个文件回到最近一次git commit或git add时的状态。
		如何将放到暂存区的文件回退到最近一次提交的版本：
			3.1 git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区  #当我们用HEAD时，表示最新的版本
			3.2 git checkout -- file
			
	四、删除文件
		1、如果是在工作区，rm误删除的话，可以很简单的就能恢复：git checkout --  file 
		2、如果要彻底从版本库删除，先git rm file    再 git  commit -m  'remove file'

【2】远程仓库(已经和git服务器建立ssh信任连接，ssh支持的原生git协议速度最快)
	一、添加远程库
		在git服务器新建git仓库，如learngit
		把本地仓库推送到github仓库
		 1、git remote add origin git@github.com:zhenlq2017/learngit.git   #本地仓库与远程仓库建立关联，添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。
		 2、git push -u origin master #把本地库的所有内容推送到远程库上，实际上是把当前分支master推送到远程，由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
		 3、之后本地有了新的提交，就可以使用:
		 git push origin master   #除了第一次加-u外，之后提交不用加，因为第一次已经做了关联。
	二、从远程库克隆
		git clone git@github.com:zhenlq2017/gitskills.git #gitskill为远程仓库
		git push  origin my-invoice:my-invoice

		4、推送本地分支local_branch到远程分支 remote_branch并建立关联关系
		本地分支推送到远程分支：

		a.远程已有remote_branch分支并且已经关联本地分支local_branch且本地已经切换到local_branch

          git push --set-upstream origin my-invoice

		b.远程已有remote_branch分支但未关联本地分支local_branch且本地已经切换到local_branch
	
         git push -u origin/remote_branch

		c.远程没有有remote_branch分支并，本地已经切换到local_branch

        git push origin local_branch:remote_branch 
【3】分支管理
		1)合并分支
			1、分支概述：简单来说，当前在那个分支，HEAD指针就指向那，每次提交，指针就会向前移动，如果不是主分支，则需要切换到master，再merge最新的分支，达到和最新分支指针一样的位置，具体见：http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001375840038939c291467cc7c747b1810aab2fb8863508000
			2、git checkout -b dev #命令加上-b参数表示创建并切换分支
			3、用git branch命令查看当前分支
				当前分支修改内容，提交后，需要切换到主分支，merge最新的分支：
				git merge dev
				合并完成后，就可以放心地删除dev分支了：
				git branch -d dev
				git push origin master --推送到远程主分支
				注：每次合并分支时，先从远程分支拉取最新的内容到本地，再修改合并，不然主分支合并时容易造成冲突
		2)解决冲突
		 git merge 时末尾出现 (master|MERGING)，并有如下提示：
			$ git merge dev
			Auto-merging readme.txt
			CONFLICT (content): Merge conflict in readme.txt
			Automatic merge failed; fix conflicts and then commit the result.
		这是因为，当前主分支比远程主分支提前n个提交，；可以通过git status 查看：
		$ git status
		On branch master
		Your branch is ahead of 'origin/master' by 2 commits.
		解决办法：
		主分支操作：git add .    git commit  -m 'xxxxxxx' 
		避免：每次更新时，事先从远程分支拉取最新的提交
		查看分支合并情况：
		git log --graph --pretty=oneline --abbrev-commit
		3) 分支管理策略
			master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
			dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；
			dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；
			合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。 	 	
		4) bug分支
			修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
			当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。
			git stash list ---查看之前保存的工作分支
				$ git stash list
				stash@{0}: WIP on dev: 6224937 add merge
			恢复之前的未提交的分支：
			1、git stash apply stash@{0} 	但是恢复后，stash内容并不删除，你需要用git stash drop stash@{0} 来删除；
			2、git stash pop，恢复的同时把stash内容也删了
		5) 其他
			查看远程库信息，使用git remote -v
			从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交 
			在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致
			如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。
			如果要丢弃一个没有被合并过的分支，可以通过git如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除
【4】 标签管理
	Git有commit，为什么还要引入tag？
	commit提交的版本号较长，不容易查找
	tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起
	
	
【5】 其他
git config --global color.ui true  ---让Git显示颜色，会让命令输出看起来更醒目
.gitignore文件----把要忽略的文件名填进去，Git就会自动忽略这些文件
git config --global alias.st status  ----配置别名
git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
配置Git的时候，加上--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。
配置文件放哪了？每个仓库的Git配置文件都放在.git/config文件中
而当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中

	 
	 
	 
		
	
